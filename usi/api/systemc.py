# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_systemc', [dirname(__file__)])
        except ImportError:
            import _systemc
            return _systemc
        if fp is not None:
            try:
                _mod = imp.load_module('_systemc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _systemc = swig_import_helper()
    del swig_import_helper
else:
    import _systemc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SC_FS = _systemc.SC_FS
SC_PS = _systemc.SC_PS
SC_NS = _systemc.SC_NS
SC_US = _systemc.SC_US
SC_MS = _systemc.SC_MS
SC_SEC = _systemc.SC_SEC

def stop():
  return _systemc.stop()
stop = _systemc.stop

def pause():
  return _systemc.pause()
pause = _systemc.pause

def wait(*args):
  return _systemc.wait(*args)
wait = _systemc.wait

def simulation_time(*args):
  return _systemc.simulation_time(*args)
simulation_time = _systemc.simulation_time

def delta_count():
  return _systemc.delta_count()
delta_count = _systemc.delta_count

def set_verbosity(*args):
  return _systemc.set_verbosity(*args)
set_verbosity = _systemc.set_verbosity

def get_curr_process_handle():
  return _systemc.get_curr_process_handle()
get_curr_process_handle = _systemc.get_curr_process_handle

def is_running():
  return _systemc.is_running()
is_running = _systemc.is_running

def get_top_level_objects():
  return _systemc.get_top_level_objects()
get_top_level_objects = _systemc.get_top_level_objects


def start(*args):
  return _systemc.start(*args)
start = _systemc.start

